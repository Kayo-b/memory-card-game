[{"/home/kayo-b/the_odin_project/memory-card-game/src/index.js":"1","/home/kayo-b/the_odin_project/memory-card-game/src/App.js":"2","/home/kayo-b/the_odin_project/memory-card-game/src/reportWebVitals.js":"3","/home/kayo-b/the_odin_project/memory-card-game/src/auxFunctions.js":"4","/home/kayo-b/the_odin_project/memory-card-game/src/components/Cards.js":"5","/home/kayo-b/the_odin_project/memory-card-game/src/components/Dialog.js":"6"},{"size":535,"mtime":1675680699276,"results":"7","hashOfConfig":"8"},{"size":6600,"mtime":1676645441493,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1675680699280,"results":"10","hashOfConfig":"8"},{"size":682,"mtime":1675966784140,"results":"11","hashOfConfig":"8"},{"size":549,"mtime":1675980154075,"results":"12","hashOfConfig":"8"},{"size":3102,"mtime":1676646160553,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"l8nl6a",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"17"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/home/kayo-b/the_odin_project/memory-card-game/src/index.js",[],[],[],"/home/kayo-b/the_odin_project/memory-card-game/src/App.js",["36"],[],"import './App.css';\nimport { randomArray } from './auxFunctions';\nimport {Cards} from './components/Cards.js';\nimport { Dialog } from './components/Dialog.js';\nimport React, { useState, useEffect } from 'react';\n\nfunction App() {\n  const [score, setScore] = useState(0);\n  const [topScore, setTopScore] = useState(0);\n  const [gameover, setGameover] = useState(false);\n  const [data1, setData1] = useState(\"\")\n  const [data2, setData2] = useState(\"\")\n  const [data3, setData3] = useState(\"\")\n  const [data4, setData4] = useState(\"\")\n  const [data5, setData5] = useState(\"\")\n  const [data6, setData6] = useState(\"\")\n  const [data7, setData7] = useState(\"\")\n  const [data8, setData8] = useState(\"\")\n  const [data9, setData9] = useState(\"\")\n  const [data10, setData10] = useState(\"\")\n  const [data11, setData11] = useState(\"\")\n  const [data12, setData12] = useState(\"\")\n  const [data13, setData13] = useState(\"\")\n  const [data14, setData14] = useState(\"\")\n\n  const changeScoreColor = document.getElementById(\"score\")\n  const changeStikyScoreColor = document.getElementById(\"scoreSticky\")\n\n  const childToParent1 = (childData) => {\n    setData1(childData)\n  }\n  const childToParent2 = (childData) => {\n    setData2(childData)\n  }\n  const childToParent3 = (childData) => {\n    setData3(childData)\n  }\n  const childToParent4 = (childData) => {\n    setData4(childData)\n  }\n  const childToParent5 = (childData) => {\n    setData5(childData)\n  }\n  const childToParent6 = (childData) => {\n    setData6(childData)\n  }\n  const childToParent7 = (childData) => {\n    setData7(childData)\n  }\n  const childToParent8 = (childData) => {\n    setData8(childData)\n  }\n  const childToParent9 = (childData) => {\n    setData9(childData)\n  }\n  const childToParent10 = (childData) => {\n    setData10(childData)\n  }\n  const childToParent11 = (childData) => {\n    setData11(childData)\n  }\n  const childToParent12 = (childData) => {\n    setData12(childData)\n  }\n  const childToParent13 = (childData) => {\n    setData13(childData)\n  }\n  const childToParent14 = (childData) => {\n    setData14(childData)\n  }\n\n  const onClickFunction = (e) => {\n    \n    if(e.target.parentNode.id !== \"Selected\") {\n      setScore(score + 1)\n      if(score === 13) {\n        setDataToEmpty()\n        setGameover(undefined)\n      }\n    } else {\n      if(score > topScore) {\n        setTopScore(score)\n        \n      }\n\n      setGameover(rerenderDialog())\n      \n      changeScoreColor.style.color = \"red\"\n      setTimeout(() => {changeScoreColor.style.color = \"white\"}, 400)\n\n      changeStikyScoreColor.style.color = \"red\"\n      setTimeout(() => {changeStikyScoreColor.style.color = \"white\"}, 400)\n\n      setDataToEmpty()\n    }\n    \n  };\n  \n  function setDataToEmpty() {\n    setScore(0)\n    setData1(\"\")\n    setData2(\"\")\n    setData3(\"\")\n    setData4(\"\")\n    setData5(\"\")\n    setData6(\"\")\n    setData7(\"\")\n    setData8(\"\")\n    setData9(\"\")\n    setData10(\"\")\n    setData11(\"\")\n    setData12(\"\")\n    setData13(\"\")\n    setData14(\"\")\n  }\n\n  function rerenderDialog() {\n   \n    if(gameover === false) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  \n  var eleArr = \n  [\n     <div id=\"ork\" className=\"cardName\"><div id={data1} className=\"dummy1\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent1}/></div><h2>Ork</h2></div>,\n     <div id=\"spcMarine\" className=\"cardName\"><div id={data2} className=\"dummy2\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent2}/></div><h2>Judiciar</h2></div>,\n     <div id=\"chaosDeamon\" className=\"cardName\"><div id={data3} className=\"dummy3\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent3}/></div><h2>Chaos Deamon</h2></div>,\n     <div id=\"adeptusMechanicus\" className=\"cardName\"><div id={data4} className=\"dummy4\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent4}/></div><h2>High Technus Zealot</h2></div>,\n     <div id=\"ultraSkaven\" className=\"cardName\"><div id={data5} className=\"dummy5\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent5}/></div><h2>Ultra Skaven</h2></div>,\n     <div id=\"nekronmancer\" className=\"cardName\"><div id={data6} className=\"dummy6\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent6}/></div><h2>Nekronmancer</h2></div>,\n     <div id=\"caveGoblin\" className=\"cardName\"><div id={data7} className=\"dummy7\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent7}/></div><h2>Cave Goblin</h2></div>,\n     <div id=\"battleWornSpcMarine\" className=\"cardName\"><div id={data8} className=\"dummy8\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent8}/></div><h2>Ultramarine</h2></div>,\n     <div id=\"hobbgoblin\" className=\"cardName\"><div id={data9} className=\"dummy9\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent9}/></div><h2>Hobbgoblin</h2></div>,\n     <div id=\"meganecron\" className=\"cardName\"><div id={data10} className=\"dummy10\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent10}/></div><h2>Meganecrus</h2></div>,\n     <div id=\"techomarauder\" className=\"cardName\"><div id={data11} className=\"dummy11\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent11}/></div><h2>Marauder</h2></div>,\n     <div id=\"necronatror\" className=\"cardName\"><div id={data12} className=\"dummy12\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent12}/></div><h2>Necronator</h2></div>,\n     <div id=\"mouserat\" className=\"cardName\"><div id={data13} className=\"dummy13\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent13}/></div><h2>Mouserat</h2></div>,\n     <div id=\"lostknight\" className=\"cardName\"><div id={data14} className=\"dummy14\" onClick={(e) => onClickFunction(e) }><Cards childToParent={childToParent14}/></div><h2>Lost Knight</h2></div>,\n  ]\n    \n\n  let randomizedArray = []\n  let random = randomArray()\n      for(let i = 0; i < eleArr.length; i++) {\n        randomizedArray.push(eleArr[random[i]])\n      }\n\n  return (\n    <div className=\"App\">\n\n      <div className=\"appHeader\">\n        <div className=\"dialogContainer\"><div className=\"speakingHead\" ></div>{<Dialog gameover={gameover}/>}</div>\n          <h3>Warhammer 40k Memory Card Game</h3>\n        <div className=\"scoreBoard\" id=\"score\">Best Score: {topScore}<br></br>Current Score: {score}</div>\n      </div>\n      <div className=\"mainContainer\">\n      <div className=\"scoreBoardSticky\" id=\"scoreSticky\">Best Score: {topScore}<br></br>Current Score: {score}</div>\n      {randomizedArray}\n\n      </div>\n    </div>\n  );\n} \n\nexport default App;\n","/home/kayo-b/the_odin_project/memory-card-game/src/reportWebVitals.js",[],[],"/home/kayo-b/the_odin_project/memory-card-game/src/auxFunctions.js",[],[],"/home/kayo-b/the_odin_project/memory-card-game/src/components/Cards.js",["37","38","39","40","41","42","43","44","45"],[],"import { setSelectionRange } from '@testing-library/user-event/dist/utils';\nimport React,  { useState, useEffect } from 'react';\nimport \"../Cards.css\"\n\nexport const Cards = ({childToParent}) => {\n\n    const [click, setClick] = useState(false);\n    const [score, setScore] = useState(0);\n    const [dum, setDum] = useState(\"not clicked\");\n    const [data, setData] = useState(\"Selected\")\n\n\n    const changeProps = () => {\n        setDum(\"Clicked\")\n   }\n    return  <div className=\"dummySquare\" onClick={() => childToParent(data)}></div>\n    \n\n    \n}\n","/home/kayo-b/the_odin_project/memory-card-game/src/components/Dialog.js",["46","47","48"],[],"import React, {useState, useEffect} from 'react'\n\nexport function Dialog({gameover, gameover2}) {\n    const [count, setCount] = useState(0);\n    const [count2, setCount2] = useState(0);\n    const [count3, setCount3] = useState(0);\n    const [countGameOver, setCoutGameOver] = useState(0);\n    const [gameoverPhrase, setGameover] = useState(\"Game over, try again. \");\n    const [victoryPhrase, setVictory] = useState(\"Congratulations.          You've achieved victory       .       .        .                        this time.\");\n    const [dialog, setDialog] = useState(\" \");\n    const [dialog2, setDialog2] = useState(\"\");\n    const [dialog3, setDialog3] = useState(\"\");\n\n    \n    let phrase1 = \"Greetings human. Welcome to my memory-card game inspired by the Warhammer 40k universe. The art was generated by Midjourney's AI. Instructions: Don't click on the same card twice.\"\n \n\n    useEffect(() => {\n\n        const phraseSequence = () => {\n\n            if(gameover === false && dialog !== \"\") {\n                setTimeout(() => {\n    \n                    if(count < phrase1.length){\n                        setDialog(dialog + phrase1[count])\n                        setCount(count + 1)\n                    } else {\n                     clearTimeout()\n                     \n                    }\n                    }\n                    , 35);\n            } else if(gameover === undefined) {\n                setTimeout(() => {   \n                    setDialog2(\"\")\n                    setDialog(\"\")\n                    \n                    if(count3 < victoryPhrase.length){\n                        setDialog3(dialog3 + victoryPhrase[count3])\n                        setCount3(count3 + 1)\n                    } else {\n\n                  \n                     clearTimeout()\n                    }; \n                    }\n                    , 35);\n\n            } else {\n               \n                    setTimeout(() => {\n                        setDialog(\"\")\n                        setDialog3(\"\")\n                        setCount3(0)\n                        \n                        if(count2 < gameoverPhrase.length){\n                            setDialog2(dialog2 + gameoverPhrase[count2])\n                            setCount2(count2 + 1)\n                        } else {\n                            \n                            setCoutGameOver(countGameOver + 1)\n                            if(countGameOver > 3) {\n                                \n                                setDialog2(\"\")\n                                setCoutGameOver(0)\n                                \n                            }\n                            \n                      \n                         clearTimeout()\n                        }; \n                        }\n                        , 35);\n                \n    \n            }\n               \n            }\n\n        phraseSequence()\n\n       \n        return setCount2(0)\n    },[dialog, dialog2, gameover, dialog3])\n\n\n    return(\n\n        <div className=\"dialogBox\"><h4>{dialog}<br></br>{dialog2}<br></br>{dialog3}</h4></div>\n        \n    )\n\n    }\n",{"ruleId":"49","severity":1,"message":"50","line":5,"column":27,"nodeType":"51","messageId":"52","endLine":5,"endColumn":36},{"ruleId":"49","severity":1,"message":"53","line":1,"column":10,"nodeType":"51","messageId":"52","endLine":1,"endColumn":27},{"ruleId":"49","severity":1,"message":"50","line":2,"column":28,"nodeType":"51","messageId":"52","endLine":2,"endColumn":37},{"ruleId":"49","severity":1,"message":"54","line":7,"column":12,"nodeType":"51","messageId":"52","endLine":7,"endColumn":17},{"ruleId":"49","severity":1,"message":"55","line":7,"column":19,"nodeType":"51","messageId":"52","endLine":7,"endColumn":27},{"ruleId":"49","severity":1,"message":"56","line":8,"column":12,"nodeType":"51","messageId":"52","endLine":8,"endColumn":17},{"ruleId":"49","severity":1,"message":"57","line":8,"column":19,"nodeType":"51","messageId":"52","endLine":8,"endColumn":27},{"ruleId":"49","severity":1,"message":"58","line":9,"column":12,"nodeType":"51","messageId":"52","endLine":9,"endColumn":15},{"ruleId":"49","severity":1,"message":"59","line":10,"column":18,"nodeType":"51","messageId":"52","endLine":10,"endColumn":25},{"ruleId":"49","severity":1,"message":"60","line":13,"column":11,"nodeType":"51","messageId":"52","endLine":13,"endColumn":22},{"ruleId":"49","severity":1,"message":"61","line":8,"column":28,"nodeType":"51","messageId":"52","endLine":8,"endColumn":39},{"ruleId":"49","severity":1,"message":"62","line":9,"column":27,"nodeType":"51","messageId":"52","endLine":9,"endColumn":37},{"ruleId":"63","severity":1,"message":"64","line":85,"column":7,"nodeType":"65","endLine":85,"endColumn":43,"suggestions":"66"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'setSelectionRange' is defined but never used.","'click' is assigned a value but never used.","'setClick' is assigned a value but never used.","'score' is assigned a value but never used.","'setScore' is assigned a value but never used.","'dum' is assigned a value but never used.","'setData' is assigned a value but never used.","'changeProps' is assigned a value but never used.","'setGameover' is assigned a value but never used.","'setVictory' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'count', 'count2', 'count3', 'countGameOver', 'gameoverPhrase', 'phrase1', and 'victoryPhrase'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setDialog' needs the current value of 'count'.","ArrayExpression",["67"],{"desc":"68","fix":"69"},"Update the dependencies array to be: [dialog, dialog2, gameover, dialog3, count, phrase1, count3, victoryPhrase, count2, gameoverPhrase, countGameOver]",{"range":"70","text":"71"},[2932,2968],"[dialog, dialog2, gameover, dialog3, count, phrase1, count3, victoryPhrase, count2, gameoverPhrase, countGameOver]"]